#!/bin/bash

if [ "$#" -ne 1 ]; then
    echo "Usage: $0 <domain>"
    exit 1
fi

domain=$1
output="/home/robin/kali/BugBounty/$domain"
mkdir -p "$output"
cd "$output" || exit 1

log_file="$output/enumeration.log"
exec > >(tee -a "$log_file") 2>&1

echo "Starting Subdomain Enumeration and Takeover Testing for $domain"
echo "Results will be saved in: $output"

handle_error() {
    echo "[ERROR] $1"
    exit 1
}

# Passive subdomain enumeration
passive_enum() {
    echo "******************************** Passive Enumeration ********************************"

    curl -s "https://dns.bufferover.run/dns?q=.$DOMAIN" | jq -r '.FDNS_A[]' | awk -F ',' '{print $2}' > "bufferover_subs.txt" 
    curl -s "https://publicwww.com/websites/%22$DOMAIN%22/?export=csv" | awk -F '","' '{print $2}' > "publicwww_subs.txt" 
    curl -s "http://web.archive.org/cdx/search/cdx?url=*.${DOMAIN}/*&output=json&collapse=urlkey" | jq -r '.[1:][] | .[2]' | sort -u | tee "wayback_passive_subs.txt"
    curl -s "https://crt.sh/?q=%.$domain&output=json" | jq -r '.[].name_value' | sed 's/\*\.//g' | sort -u | tee "crtsh_passive.txt"
    curl -s "https://otx.alienvault.com/api/v1/indicators/hostname/$domain/passive_dns" | jq -r '.passive_dns[]?.hostname' | sort -u | tee "alienvault_passive.txt"
    curl -s "https://api.threatminer.org/v2/domain.php?q=$domain&rt=5" | jq -r '.data[].subdomains' | grep -oE "[a-zA-Z0-9._-]+\.$domain" | sort -u | tee "threatminer_passive.txt"
    curl -s "https://api.threatbook.cn/v3/domain/subdomain?domain=$domain" | jq -r '.data[]' | sort -u | tee "threatbook_passive.txt"
    curl -s "https://api.hackertarget.com/hostsearch/?q=$domain" | cut -d',' -f1 | sort -u | tee "hackertarget_passive.txt"
    curl -s "https://api.threatcrowd.org/searchApi/v2/domain/report/?domain=$domain" | jq -r '.subdomains[]' | sort -u | tee "threatcrowd_passive.txt"
    curl -s "https://riddler.io/search/exportcsv?q=pld:$domain" | grep -oE "[a-zA-Z0-9._-]+\.$domain" | sort -u | tee "riddler_passive.txt"
    curl -s "https://urlscan.io/api/v1/search/?q=domain:$domain&size=10000" | jq -r '.results[]?.page?.domain' | sort -u | tee "urlscan_passive.txt"
    curl -s "https://rapiddns.io/subdomain/$domain?full=1#result" | grep "<td><a" | cut -d '"' -f 2 | grep http | cut -d '/' -f3 | sed 's/#results//g' | sort -u | tee "rapiddns_passive.txt"
    curl -s "https://www.virustotal.com/ui/domains/$domain/subdomains?limit=40" | grep -Po "((http|https):\/\/)?(([\w.-]*)\.([\w]*)\.([A-z]))\w+" | sort -u | tee "virustotal_passive.txt"
    curl -s "https://securitytrails.com/list/apex_domain/$domain" | grep -Po "((http|https):\/\/)?(([\w.-]*)\.([\w]*)\.([A-z]))\w+" | grep ".$domain" | sort -u | tee "securitytrails_passive.txt"
    curl --silent https://sonar.omnisint.io/subdomains/$domain | grep -oE "[a-zA-Z0-9._-]+\.$domain" | sort -u | tee "sonar_passive.txt"
    curl --silent -X POST https://synapsint.com/report.php -d "name=https%3A%2F%2F$domain" | grep -oE "[a-zA-Z0-9._-]+\.$domain" | sort -u | tee "synapsint_passive.txt"
    curl -s "https://api.sublist3r.com/search.php?domain=$domain" | jq -r '.subdomains[]' | sort -u | tee "sublist3r_passive.txt"
    curl -s "https://api.certspotter.com/v1/issuances?domain=$domain&include_subdomains=true&expand=dns_names" | jq -r '.[].dns_names[]' | sort -u | tee "certspotter_passive.txt"
    
}

# Active enumeration
active_enum() {
    echo "******************************** Active Enumeration ********************************"
    subfinder -d "$domain" -all -recursive -o "subfinder_subdomain.txt"
    assetfinder --subs-only "$domain" | tee "assetfinder_subdomain.txt"
    shodan search domain:"$domain" | jq -r '.matches[]?.hostnames[]' | sort -u | tee "shodan_subdomain.txt"
    shodanx subdomain -d "$domain" -ra -o "shodanx_subdomain.txt"
    findomain -t "$domain" -v -o findomain_subdomain.txt
    amass enum -norecursive  -d "$domain" -o amass_subdomain.txt
    anubis -d "$DOMAIN" -o "anubis_subs.txt" 
    chaos -d "$DOMAIN" -k "$CHAOS_KEY" -o "chaos_subs.txt" 
    sublist3r -d "$DOMAIN" -o "sublist3r_subs.txt" 
    dnsrecon -d "$DOMAIN" -D "$WORDLIST" -t brt -n "$DNS_RESOLVER" -o "dnsrecon_subs.txt"

}

# Brute-force enumeration
bruteforce_enum() {
    echo "******************************** Bruteforce Enumeration ********************************"
    subrute -d "$domain" | tee "subbrute_subdomain.txt"
    #gobuster dns -d "$domain" -w /usr/share/wordlists/SecLists/Discovery/DNS/subdomains-top1million-5000.txt -o gobuster_subdomain.txt
}

# combine results
combine_results() {
    echo "******************************** Combining All Results ********************************"
    cat *.txt  | anew domain_all_subdomains.txt"
}
# Wayback Machine
wayback\_urls\(\) \{
echo "\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\* Fetching Wayback URLs \*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*"
curl \-s "http\://web\.archive\.org/cdx/search/cdx?url\=\*\.</span>{domain}/*&output=json&collapse=urlkey" | jq -r '.[1:][] | .[2]' | sort -u | tee "wayback_passive.txt"
    waybackrobots -d "$domain" | tee "waybackrobots.txt"
    cat "$domain_all_subdomains.txt" | waybackurls | tee "urls_wayback.txt"
}

# subdomains of subdomains
subdomain_of_subdomain() {
    echo "******************************** Finding Subdomains of Subdomains ********************************"
    subfinder -dL "$domain_all_subdomains.txt" -o "subfinder_sub_of_sub.txt"
    assetfinder --subs-only -subs-only "$domain_all_subdomains.txt" | tee "assetfinder_sub_of_sub.txt"
}

# Knockpy
knockpy_enum() {
    echo "******************************** Running Knockpy ********************************"
    knockpy -d "<span class="math-inline">domain" \-\-recon \-\-save report \-\-json
grep '"domain"' "report/</span>{domain}"*.json | awk -F'"' '{print $4}' | tee "knockpy_subdomain.txt"
}

# HTTP probing
http_probing() {
    echo "******************************** HTTP Probing ********************************"
    cat "$domain_all_subdomains.txt" | httpx -silent -o httpx_live.txt
}

# DNS Resolving
dns_resolving() {
    echo "******************************** DNS Resolving ********************************"
    cat "$domain_all_subdomains.txt" | dnsx -a -resp-only -o dnsx_resolved.txt
}

# Subdomain Takeover Testing
takeover_testing() {
    echo "******************************** Subdomain Takeover Testing ********************************"
    # subjack
    if command -v subjack &> /dev/null; then
        subjack -w "$domain_all_subdomains.txt" -t 100 -timeout 30 -ssl -c "$GOPATH/src/github.com/haccer/subjack/fingerprints.json" -v 3 > subjack_takeover.txt
    fi
    # SubOver
    if command -v SubOver &> /dev/null; then
        SubOver -l "$domain_all_subdomains.txt" -o SubOver_takeover.txt
    fi
    # autoSubTakeover
    if command -v autoSubTakeover &> /dev/null; then
        autoSubTakeover -l "$domain_all_subdomains.txt" -o autoSubTakeover_takeover.txt
    fi
    # tko-subs
    if command -v tko-subs &> /dev/null; then
        tko-subs -l "$domain_all_subdomains.txt" -o tko_subs_takeover.txt
    fi
    # takeover
    if command -v takeover &> /dev/null; then
      takeover -l "$domain_all_subdomains.txt" -o takeover_tool.txt
    fi
    #dnsReaper
    if command -v dnsReaper &> /dev/null; then
        dnsReaper -l "$domain_all_subdomains.txt" -o dnsReaper_takeover.txt
    fi
    # cnames
    if command -v cnames &> /dev/null; then
        cat "$domain_all_subdomains.txt" | cnames > cnames_output.txt
    fi
    #second-order
    if command -v second-order &> /dev/null; then
        second-order -l "$domain_all_subdomains.txt" -o second_order_takeover.txt
    fi
    #subHijack
    if command -v subHijack &> /dev/null; then
        subHijack -l "$domain_all_subdomains.txt" -o subHijack_takeover.txt
    fi
    #NSBrute
    if command -v NSBrute &> /dev/null; then
        NSBrute -d "$domain" -l "$domain_all_subdomains.txt" -o NSBrute_takeover.txt
    fi
    #can-i-take-over-xyz (this is not a tool but an online resource, so we can't automate it)
    echo "[INFO] Manual check of 'can-i-take-over-xyz' resource is recommended."

    echo "[INFO] Subdomain Takeover testing completed. Results in *_takeover.txt files."
}

# Calling all enumeration steps
passive_enum
active_enum
knockpy_enum
bruteforce_enum
combine_results
wayback_urls
subdomain_of_subdomain
http_probing
dns_resolving
takeover_testing

echo "Subdomain enumeration and takeover testing completed. Check results in: $output"
echo "******************************** End of Enumeration and Takeover Testing ********************************"